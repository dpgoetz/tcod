#!/usr/bin/python

import os
import re
import sys
from optparse import OptionParser

from swift.common.client import ClientException, Connection


def skvs_set(global_options, args):
    """[options] <key> [<value>]
    Sets the <key> to the <value>.

    The <key> is of the form store[/substore]/name such as mystore/key1 or
    mystore/substore1/substore2/key2.
    """
    parser = OptionParser(usage=('set ' +
        skvs_set.__doc__.strip()).replace('\n', '\n\n', 1).replace('\n    ',
        '\n'))
    parser.add_option('-f', '--file', dest='file',
        help='use contents of FILE instead of <value>')
    (options, args) = parser.parse_args(args)
    if len(args) < 1 or len(args) > 2 or '/' not in args[0] or \
            (len(args) == 2 and options.file):
        parser.print_help()
        sys.exit()
    container, name = args[0].split('/', 1)
    container = 'skvs_' + container
    name = name.rstrip('/')
    if options.file:
        value = open(options.file)
    else:
        value = args[1] if len(args) > 1 else ''
    conn = Connection(global_options.auth, global_options.user,
                      global_options.key, snet=global_options.snet)
    try:
        conn.put_object(container, name, value)
    except ClientException, err:
        if err.http_status == 404:
            conn.put_container(container)
            conn.put_object(container, name, value)


def skvs_get(global_options, args):
    """[options] <key>
    Retrieves the value for the <key>.

    The <key> is of the form store[/substore]/name such as mystore/key1 or
    mystore/substore1/substore2/key2.
    """
    parser = OptionParser(usage=('get ' +
        skvs_get.__doc__.strip()).replace('\n', '\n\n', 1).replace('\n    ',
        '\n'))
    parser.add_option('-f', '--file', dest='file',
        help='write value to FILE instead of stdout')
    (options, args) = parser.parse_args(args)
    if len(args) != 1 or '/' not in args[0]:
        parser.print_help()
        sys.exit()
    container, name = args[0].split('/', 1)
    container = 'skvs_' + container
    name = name.rstrip('/')
    conn = Connection(global_options.auth, global_options.user,
                      global_options.key, snet=global_options.snet)
    value = conn.get_object(container, name)[1]
    if options.file:
        open(options.file, 'wb').write(value)
    else:
        print value,


def skvs_list(global_options, args):
    """[options] [store]
    Lists stores, substores, or keys.

    Lists stores if [store] not given, keys for [store], or substores for
    [store] with the --substores option. When listing keys, you can also
    use --grep and --igrep to only list keys whose values match the expression
    given.

    The regular expressions recognized by --grep and --igrep are as defined by
    Python's re library: http://docs.python.org/library/re.html
    A notable difference from the Unix grep command is in checking for word
    boundaries. Where you'd use '\<word\>' with grep, you use '\bword\b' with
    --grep.
    """
    parser = OptionParser(usage=('list ' +
        skvs_list.__doc__.strip()).replace('\n', '\n\n', 1).replace('\n    ',
        '\n'))
    parser.add_option('-s', '--substores', action='store_true',
       dest='substores', default=False, help='list substores rather than keys')
    parser.add_option('-g', '--grep', dest='grep',
        help='list only keys whose values match the expression given')
    parser.add_option('-i', '--igrep', dest='igrep',
        help='list only keys whose values match the expression given, '
             'ignoring case')
    (options, args) = parser.parse_args(args)
    if len(args) > 1:
        parser.print_help()
        sys.exit()
    if options.grep and options.igrep:
        sys.exit('you can only use --grep or --igrep, not both')
    grep = None
    if options.grep:
        grep = re.compile(options.grep, re.MULTILINE)
    elif options.igrep:
        grep = re.compile(options.igrep, re.MULTILINE | re.IGNORECASE)
    conn = Connection(global_options.auth, global_options.user,
                      global_options.key, snet=global_options.snet)
    if not args:
        headers, listing = conn.get_account(prefix='skvs_')
        while listing:
            for item in listing:
                print item['name'][5:]
            marker = listing[-1]['name']
            headers, listing = conn.get_account(prefix='skvs_', marker=marker)
        return
    if '/' not in args[0]:
        container = args[0]
        subcontainer = ''
    else:
        container, subcontainer = args[0].split('/', 1)
        subcontainer = subcontainer.rstrip('/')
    container = 'skvs_' + container
    prefix = ''
    if subcontainer:
        prefix = subcontainer + '/'
    headers, listing = conn.get_container(container, delimiter='/',
                                          prefix=prefix)
    while listing:
        for item in listing:
            name = None
            if options.substores:
                if 'subdir' in item:
                    name = item['subdir'][:-1]
            elif 'name' in item:
                if grep:
                    if grep.search(conn.get_object(container, item['name'])[1]):
                        name = item['name']
                else:
                    name = item['name']
            if name:
                print name[len(prefix):]
        if 'name' in listing[-1]:
            marker = listing[-1]['name']
        else:
            marker = listing[-1]['subdir']
        headers, listing = conn.get_container(container, delimiter='/',
                                              marker=marker, prefix=prefix)


if __name__ == '__main__':
    commands = dict((key[5:], value)
        for key, value in globals().iteritems() if key.startswith('skvs_'))
    usage = '''
Usage: %prog <command> [options] [args]

Swift Key Value Store, skvs, pronounced "skivvies". A utility for using Swift
as a simple key/value store. You can do the usual set, get, and listing of
keys. In addition, you can filter a key listing with regular expression
matching of key values, though these queries can take a while to complete.

A key name is of the form store[/substore]/name such as mystore/key1 or
mystore/substore1/substore2/key2.

Commands:
    '''.strip()
    for command in sorted(commands.keys()):
        usage += '\n  ' + command + ' ' + \
                 commands[command].__doc__.strip().split('\n\n', 1)[0]
    usage += '\n\nYou can follow any command with -h or --help for help on ' \
             'that specific command.'
    parser = OptionParser(version='%prog 1.0', usage=usage)
    parser.disable_interspersed_args()
    parser.add_option('-A', '--auth', dest='auth',
                      default=os.environ.get('SWIFT_AUTH'),
                      help='URL for obtaining an auth token; can also be set '
                           'with the SWIFT_AUTH environment variable')
    parser.add_option('-U', '--user', dest='user',
                      default=os.environ.get('SWIFT_USER'),
                      help='user name for obtaining an auth token; can also '
                           'be set with the SWIFT_USER environment variable')
    parser.add_option('-K', '--key', dest='key',
                      default=os.environ.get('SWIFT_KEY'),
                      help='key for obtaining an auth token; can also be set '
                           'with the SWIFT_KEY environment variable')
    parser.add_option('-s', '--snet', action='store_true', dest='snet',
                      default=False, help='use SERVICENET internal network')
    args = sys.argv[1:]
    if not args:
        args = ['-h']
    (options, args) = parser.parse_args(args)
    if not (options.auth and options.user and options.key):
        sys.exit('''
Requires SWIFT_AUTH, SWIFT_USER, and SWIFT_KEY environment variables be set or
overridden with -A, -U, or -K.'''.strip())
    if not args or args[0] not in commands:
        parser.print_usage()
        if args:
            sys.exit('no such command: %s' % args[0])
        sys.exit()
    commands[args[0]](options, args[1:])
